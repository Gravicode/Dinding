@page "/listing_list"
@page "/listing_list/category/{CategoryId:long}"
@page "/listing_list/subcategory/{SubCategoryId:long}"
@page "/listing_list/{Keyword}"
@page "/listing_list/{Keyword}/{SelCategory}"
@inject IJSRuntime IJS
@inject NavigationManager NavMgr

@inject ListingService ListingSvc
@inject CategoryService CategorySvc
@inject SubCategoryService SubCategorySvc

@inject UserProfileService UserSvc
@inject PopularTagService PopularTagSvc
<BreadcrumbPage LinkName="Listing List" LinkUrl="/listing_list"></BreadcrumbPage>

<div id="vfx-product-inner-item">
    <div class="container">
        <div class="row">
            <div class="col-md-3 col-sm-4 col-xs-12">
                <div class="news-search-lt">
                    <input @bind="Keyword" class="form-control" placeholder="Cari" type="text">
                    <span class="input-search"> <i class="fa fa-search"></i> </span>
                </div>
                <div class="left-slide-slt-block">
                    <h3>Kategori</h3>
                </div>
                <div class="list-group">
                    @if (ListCategories != null)
                        @foreach (var category in ListCategories)
                        {
                            <a href="" @onclick:preventDefault @onclick="()=>SelectCategory(category.Name)" class="list-group-item active"><i class="fa fa-hand-o-right"></i> @category.Name <span class="list-lt">@category.Total</span></a>
                        }
                </div>
                <div class="left-slide-slt-block">
                    <h3>Tag Populer</h3>
                </div>
                <div class="archive-tag">
                    <ul>
                        @foreach (var tag in ListPopularTag)
                        {
                            <li><a href="#" @onclick:preventDefault @onclick="()=>SelectTag(tag.Tag)">@tag.Tag</a></li>
                        }

                    </ul>
                </div>
                <div class="left-slide-slt-block">
                    <h3>Lokasi Iklan</h3>
                </div>
                <div class="left-location-item">
                    <ul>
                        @foreach (var loc in ListLocations)
                        {
                            <li><a href="#" @onclick:preventDefault @onclick="()=>SelectLocation(loc.Location)"><i class="fa fa-angle-double-right"></i> @loc.Location</a><span class="list-lt">@loc.Count</span></li>
                        }

                    </ul>
                </div>
                <div class="left-slide-slt-block">
                    <h3>Arsip</h3>
                </div>
                <div class="left-archive-categor">
                    <ul>
                        @foreach (var period in ListPeriod)
                        {
                            <li><a href="#" @onclick:preventDefault @onclick="()=>SelectPeriod(period)"><i class="fa fa-angle-double-right"></i> @period.MonthYear</a><span class="list-lt">@period.Count</span></li>
                        }

                    </ul>
                </div>
            </div>
            <div class="col-md-9 col-sm-8 col-xs-12 nopadding">
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <div class="sorts-by-results">
                        <div class="col-md-6 col-sm-6 col-xs-6"> <span class="result-item-view">Hasil Yang Ditampilkan <span class="yellow">@ListItems.Count.ToString("n0")</span> Iklan</span> </div>
                        <div class="col-md-6 col-sm-6 col-xs-6">
                            <div class="disp-f-right">
                                <div class="disp-style"><a href="listing_grid"><i class="fa fa-th"></i></a></div>
                                <div class="disp-style active"><a href="listing_list"><i class="fa fa-th-list"></i></a></div>
                            </div>
                        </div>
                    </div>
                    <Virtualize Items="@ListItems" Context="item">
                        <div @key="@item.Id" class="recent-listing-box-container-item list-view-item">
                            <div class="col-md-4 col-sm-12 nopadding feature-item-listing-item listing-item">
                                <div class="recent-listing-box-image">
                                    <h1>@item.Category.Name</h1>
                                    <img src="@(item.ImageUrls.Split(';')[0])" alt="img1">
                                </div>
                                <div class="hover-overlay">
                                    <div class="hover-overlay-inner">
                                        <ul class="listing-links">
                                            <AuthorizeView>
                                                <Authorized>
                                                    @{
                                                        var like = LikeList[item.Id];
                                                        var book = BookmarkList[item.Id];
                                                    }
                                                    <li>
                                                        <a href="#" @onclick:preventDefault @onclick="(() => TogglePostLike(item, like))">
                                                            @if (like)
                                                            {
                                                                <i class="fa fa-heart blue-1 "></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="fa fa-heart-o green-1 "></i>

                                                            }
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a href="#" @onclick:preventDefault @onclick="(() => TogglePostBookmark(item, book))">
                                                            @if (book)
                                                            {
                                                                <i class="fa fa-map-marker blue-1"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="fa fa-map-marker green-1"></i>

                                                            }
                                                        </a>
                                                    </li>
                                                </Authorized>
                                            </AuthorizeView>
                                            <li><a href="#" @onclick="(() => PrepareForView(item))" data-toggle="modal" data-target="#shareModal"><i class="fa fa-share yallow-1"></i></a></li>

                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8 col-sm-12 nopadding">
                                <div class="recent-listing-box-item">
                                    <div class="listing-boxes-text">
                                        <a href="@($"listing_detail/{item.Id}")">
                                            <h3>@item.Title</h3>
                                        </a> <a href="#"><i class="fa fa-phone"></i> @item.Phone</a>
                                        <p>@item.Desc</p>
                                    </div>
                                    <div class="recent-feature-item-rating">
                                        <h2><i class="fa fa-map-marker"></i> @item.Kota</h2>
                                        <span>
                                            @{
                                                var ratingKosong = 5 - item.Rating;
                                            }
                                            @for (var x = 0; x < item.Rating; x++)
                                            {
                                                <i class="fa fa-star"></i>
                                            }
                                            @for (var x = 0; x < ratingKosong; x++)
                                            {
                                                <i class="fa fa-star-o"></i>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Virtualize>
                </div>
                <div style="display:none;" class="vfx-person-block">
                    <ul class="vfx-pagination">
                        <li><a href="#"><i class="fa fa-angle-double-left"></i></a></li>
                        <li class="active"><a href="#">1</a></li>
                        <li><a href="#">2</a></li>
                        <li><a href="#">3</a></li>
                        <li><a href="#"><i class="fa fa-angle-double-right"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<ShareDialogPage @ref="detail" TaskObject=@itemObject>
    <CustomHeader>@customHeader</CustomHeader>
</ShareDialogPage>
@code {
    //List<Listing> ListItems = new();
    //[Parameter]
    //public string Keyword { set; get; }
    [Parameter]
    public long CategoryId { set; get; }
    [Parameter]
    public long SubCategoryId { set; get; }
    List<SubCategory> ListSubCategories = new();
    //IEnumerable<CategoryCountCls> ListCategories;
    //[CascadingParameter]
    //public MainLayout Layout { get; set; }
    List<Listing> ListItems = new();
    Listing itemObject = new();
    string customHeader = "Detail info";
    ShareDialogPage detail;
    Dictionary<long, bool> LikeList = new();
    Dictionary<long, bool> BookmarkList = new();

    [Parameter]
    public string Keyword { get; set; }

    [Parameter]
    public string SelCategory { get; set; } = "";
    IEnumerable<CategoryCountCls> ListCategories;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<PopularTag> ListPopularTag = new();
    List<LocationItemCls> ListLocations = new();
    List<PeriodFilterCls> ListPeriod = new();
    bool IsLogin = false;
    string Nama = "Saya";
    string Username;
    UserProfile selUser;
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private void PrepareForView(Listing item)
    {
        customHeader = $"Share: {item.Title}";
        itemObject = item;
        //detail.DocumentUrl = item.DocumentUrl;
    }
    async Task TogglePostLike(Listing post, bool Like)
    {
        Like = !Like;
        if (Like)
        {
            ListingSvc.LikePost(selUser.Id, selUser.Username, post.Id);
        }
        else
        {
            ListingSvc.UnLikePost(selUser.Id, post.Id);
        }
        LikeList[post.Id] = Like;
    }

    async Task TogglePostBookmark(Listing post, bool Bookmark)
    {
        Bookmark = !Bookmark;
        if (Bookmark)
        {
            ListingSvc.AddBookmark(selUser.Id, selUser.Username, post.Id);
        }
        else
        {
            ListingSvc.RemoveBookmark(selUser.Id, post.Id);
        }
        BookmarkList[post.Id] = Bookmark;
    }



    protected override async Task OnInitializedAsync()
    {


        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var UserName = user.Identity.Name;
            selUser = UserSvc.GetItemByEmail(UserName);
            Nama = selUser?.FullName;
            IsLogin = true;
        }
        ListSubCategories = SubCategorySvc.GetDataWithCategory();
        ListCategories = CategorySvc.GetCategoriesWithCount();
        ListPopularTag = PopularTagSvc.GetPopularTags();
        ListLocations = ListingSvc.GetLocations();
        ListPeriod = ListingSvc.GetPeriods();
        await LoadData();
    }
    //async Task LoadData()
    //{
    //    ListItems = ListingSvc.GetAllData(Keyword, CategoryId, SubCategoryId);
    //}
    async Task LoadData(string Tipe = "")
    {
        switch (Tipe)
        {
            case "Tag":
                ListItems = ListingSvc.GetDataByTag(Keyword);
                break;
            case "Location":
                ListItems = ListingSvc.GetDataByLocation(Keyword);
                break;
            case "Category":
            default:
                if (CategoryId == 0)
                    ListItems = ListingSvc.GetAllData(Keyword, SelCategory);
                else
                    ListItems = ListingSvc.GetAllData(Keyword, CategoryId, SubCategoryId);
                //ListItems = ListingSvc.GetAllData(Keyword, SelCategory);
                break;
        }
        if (ListItems != null && IsLogin)
        {
            LikeList.Clear();
            BookmarkList.Clear();
            ListItems.ForEach(x =>
            {
                if (x.ListingFavorites != null && !LikeList.ContainsKey(x.Id))
                {
                    LikeList.Add(x.Id, x.ListingFavorites.Any(c => c.UserId == selUser.Id));
                }
                else
                {
                    LikeList.Add(x.Id, false);
                }

                if (x.ListingBookmarks != null && !BookmarkList.ContainsKey(x.Id))
                {
                    BookmarkList.Add(x.Id, x.ListingBookmarks.Any(c => c.UserId == selUser.Id));
                }
                else
                {
                    BookmarkList.Add(x.Id, false);
                }
            });
        }

    }

    async Task LoadData(PeriodFilterCls period)
    {
        ListItems = ListingSvc.GetAllData(Keyword, period);
    }

    async Task SelectTag(string Tag)
    {
        Keyword = Tag;
        await LoadData("Tag");
    }

    async Task SelectCategory(string category)
    {
        SelCategory = category;
        await LoadData("Category");
    }


    async Task SelectLocation(string Tag)
    {
        Keyword = Tag;
        await LoadData("Location");
    }

    async Task SelectPeriod(PeriodFilterCls period)
    {

        await LoadData(period);
    }



    async Task KeyUp(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            await LoadData();

        }
    }
    async Task OpenCategory(long CategoryId)
    {
        SubCategoryId = 0;
        NavMgr.NavigateTo($"/listing_list/category/{CategoryId}");
    }

}
