@page "/my_listing"
@inject IJSRuntime IJS
@inject ListingService service

@inject IJSRuntime jsRuntime
@inject NavigationManager NavMgr
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<BreadcrumbPage LinkName="Iklan Saya" LinkUrl="/my_listing"></BreadcrumbPage>

<div id="dashboard_inner_block">
    <div class="container">
        <div class="row">
            <div class="col-md-12 text-center">
                <div class="col-md-12 all-categorie-list-title bt_heading_3">
                    <h1>Iklan <span> Saya</span></h1>
                    <div class="blind line_1"></div>
                    <div class="flipInX-1 blind icon"><span class="icon"><i class="fa fa-stop"></i>&nbsp;&nbsp;<i class="fa fa-stop"></i></span></div>
                    <div class="blind line_2"></div>
                </div>
                <div class="row">
                    <InnerSideBarPage></InnerSideBarPage>
                    <div class="col-md-9 col-sm-8 col-xs-12">
                        <div id="dashboard_listing_blcok">
                            @if (DataListing == null)
                            {
                                <p><em>No data exist...</em></p>
                            }
                            else
                            {

                                <div class="tg-listing">
                                    <div class="tg-listing-head">
                                        <div class="tg-titlebox">
                                            <h3>Nama Iklan</h3>
                                        </div>
                                        <div class="tg-titlebox">
                                            <h3>Dilihat</h3>
                                        </div>
                                        <div class="tg-titlebox">
                                            <h3>Favorit</h3>
                                        </div>
                                        <div class="tg-titlebox">
                                            <h3>Tindakan</h3>
                                        </div>
                                    </div>
                                    <div class="tg-lists">
                                        <Virtualize Items="@DataListing" Context="item">

                                            <div @key="item.Id" class="tg-list">
                                                <div class="tg-listbox" data-title="title">
                                                    <span class="list_user_thu"> <img src="@(item.ImageUrls.Split(';')[0])" alt="@item.Desc"> </span>
                                                    <div class="tg-listdata">
                                                        <h4><a href="#" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal">@item.Title</a></h4>
                                                        <span>Harga: Rp.@item.Harga.ToString("n0")</span>
                                                        <time datetime="@item.CreatedDate.ToString("MM-dd-yyyy HH:mm")">@item.CreatedDate.ToString("dd-MMM-yyyy")</time>
                                                    </div>
                                                </div>
                                                <div class="tg-listbox" data-viewed="viewed"> <span>@item.ListingViews?.Count().ToString("n0")</span> </div>
                                                <div class="tg-listbox" data-favorites="favorites"> <span>@item.ListingFavorites?.Count().ToString("n0")</span> </div>
                                                <div class="tg-listbox" data-action="action"> <a class="tg-btn-list" href="#" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal"><i class="fa fa-pencil"></i></a> <a class="tg-btn-list" href="#" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal"><i class="fa fa-trash-o"></i></a> </div>
                                            </div>
                                        </Virtualize>
                                    </div>
                                    <div style="display:none;" class="vfx-person-block">
                                        <ul class="vfx-pagination">
                                            <li><a href="#"><i class="fa fa-angle-double-left"></i></a></li>
                                            <li class="active"><a href="#">1</a></li>
                                            <li><a href="#">2</a></li>
                                            <li><a href="#">3</a></li>
                                            <li><a href="#"><i class="fa fa-angle-double-right"></i></a></li>
                                        </ul>
                                    </div>
                                </div>

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<ConfirmDialog OnClick="@Delete" />
<ListingDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</ListingDetail>

@code {
    bool HasLogin = false;
    ListingDetail detail;

    string customHeader = string.Empty;
    List<Listing> DataListing=new();
    Listing itemObject = new Listing();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    async Task DownloadFile(string Url)
    {
        if (!string.IsNullOrEmpty(Url))
        {
            NavMgr.NavigateTo(Url, true);
        }
        else
        {
            toastService.ShowError("Url kosong atau tidak valid.");
        }

    }

    UserProfile selUser;
    Dinding.Data.UserProfileService Userservice;
    protected override async Task OnInitializedAsync()
    {

        if (Userservice == null) Userservice = new UserProfileService();
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            selUser = Userservice.GetItemByEmail(UserName);
            HasLogin = true;
        }


        await LoadData();

    }
    private async ValueTask<ItemsProviderResult<Listing>> LoadListing(ItemsProviderRequest request)
    {
        var numRecord = Math.Min(request.Count, DataListing.Count - request.StartIndex);
        var datas = DataListing.Skip(request.StartIndex).Take(numRecord);
        //await EmployeesService.GetEmployeesAsync(request.StartIndex, numEmployees, request.CancellationToken);

        return new ItemsProviderResult<Listing>(datas, DataListing.Count);
    }
    async Task LoadData()
    {
        DataListing = service.GetMyListing(selUser.Id);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

        }
    }

    private void InitializeitemObject()
    {

        itemObject = new Listing();


        customHeader = "Masukan Listing Baru";
    }
    private async void DataChanged()
    {
        await LoadData();
        StateHasChanged();
    }

    private void PrepareForEdit(Listing item)
    {
        customHeader = "Ubah Data Listing";
        itemObject = item;
        //detail.DocumentUrl = item.DocumentUrl;
    }
    private void PrepareForDelete(Listing item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        await LoadData();
        itemObject = new Listing() { Id = -1 };
    }



}
