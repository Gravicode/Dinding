@inject IJSRuntime jsRuntime
@using System.IO
@inject IToastService toastService
@inject ListingService service
@inject AzureBlobHelper AzureBlobHelper;
<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="nama">Title</label>
                        <input type="hidden" @bind="@TaskObject.Id" />
                        <input type="text" id="nama" class="form-control" @bind="@TaskObject.Title" />
                        <ValidationMessage For="@(() => TaskObject.Title)" />
                    </div>

                    <div class="form-group">
                        <label for="pic">Tanggal Pasang</label>
                        <textarea type="text" id="pic" class="form-control" @bind="@TaskObject.Desc" />
                        <ValidationMessage For="@(() => TaskObject.Desc)" />
                    </div>

                    <div class="form-group">
                        <label for="Alamat">Alamat</label>
                        <textarea id="Alamat" class="form-control" @bind="@TaskObject.Alamat" />
                        <ValidationMessage For="@(() => TaskObject.Alamat)" />
                    </div>

                    <div class="form-group">
                        <label for="Harga">Harga (Rp)</label>
                        <input type="number" id="Harga" class="form-control" @bind="@TaskObject.Harga" />
                        <ValidationMessage For="@(() => TaskObject.Harga)" />
                    </div>  
                    
                    <div class="form-group">
                        <label for="Harga">Harga (Rp)</label>
                        <div class="fileupload_block">
                            <InputFile id="fileInput1" accept=".jpg,.png,.jpeg,.gif" multiple OnChange="UploadFiles" style="display:none;" hidden />
                            <button type="button" class="btn btn-success" @onclick="(()=>PrepareUpload())"  >Pilih Gambar</button> 
                            @if (TaskObject.ImageUrls?.Length > 0)
                            {
                                <p>Gambar sudah diupload</p>
                            }
                            else
                            {
                                <p>Pilih Gambar</p>
                            }
                            </div>
                    </div>



                    <button type="submit" class="btn btn-primary">Simpan</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public Listing TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
          
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var imageurls = new List<string>();
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {

            //var file = e.File;
            if (file != null)
            {
                var ms = new MemoryStream();
                await file.OpenReadStream(AppConstants.MaxAllowedFileSize).CopyToAsync(ms);
                var bytes = SKiaImageHelper.FixedSize(ms, 900, 500, false);
                string newName = string.Empty;

                newName = $"listing_{(string.IsNullOrEmpty(UserName) ? "rojul" : UserName)}_{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
                var FileUrl = $"{AppConstants.UploadUrlPrefix}{newName}";
                await AzureBlobHelper.UploadFile(newName, bytes);
                imageurls.Add(FileUrl);

            }
        }
        TaskObject.ImageUrls = string.Join(';', imageurls);
    }
    async Task PrepareUpload()
    {
        await jsRuntime.InvokeVoidAsync("OpenFileUpload", "fileInput1");
    }
    private async void HandleValidSubmit()
    {


        if (TaskObject.Id == 0)
        {

            var hasil = service.InsertData(TaskObject);
            if (!hasil)
            {
                toastService.ShowError("Gagal menyimpan data. Isi data dengan lengkap.", "Perhatian");
            }
        }
        else
        {
            service.UpdateData(TaskObject);
        }

        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }


}